# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-Test

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      config_file:
        description: 'The configuration file name in the "myconfig" folder'
        required: false
        default: 'x86.config'
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    # runs-on: ubuntu-latest
    runs-on: ubuntu-22.04

    steps:
      - name: Show Task Information
        run: |
          echo "SSH connection: ${{ github.event.inputs.ssh }}"
          echo "Repo URL: $REPO_URL"
          echo "Repo Branch: $REPO_BRANCH"

      - name: Check Server Information
        run: |
          echo "--------------------------System Information--------------------------"
          echo "Operating System: $(lsb_release -d | awk -F'\t' '{print $2}')"
          echo "Kernel Version: $(uname -r)"
          echo "--------------------------CPU Information--------------------------"
          echo "Physical CPU Count: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU Core Count: $(nproc)"
          echo -e "CPU Model Information: $(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------Memory Information--------------------------"
          echo "Installed Memory Details:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------Disk Information--------------------------"
          echo "Disk Count: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Checkout Project
        uses: actions/checkout@main

      - name: Check If Config File Exists
        working-directory: ./
        run: |
          if [ ! -f "./myconfig/${{ github.event.inputs.config_file }}" ]; then
            echo "Error: Configuration file myconfig/${{ github.event.inputs.config_file }} does not exist."
            exit 1
          fi

      - name: Space Cleanup And Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          if [ -n "$(docker images -q)" ]; then
            docker rmi $(docker images -q)
          else
            echo "No Docker images to remove"
          fi
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          # sudo -E apt -y purge azure-cli* docker* ghc* zulu* *llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          for pkg in azure-cli* docker* ghc* zulu* *llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* *jdk microsoft* texlive* mono*; do
            if dpkg -l | grep -q "$pkg"; then
              sudo -E apt -y purge "$pkg*"
            else
              echo "$pkg not installed, skipping..."
            fi
          done
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          echo "--------------------------Disk Information After Cleanup--------------------------"
          echo "Disk Count: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Launch SSH Management
        uses: P3TERX/ssh2actions@v1.0.0
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Pull Lean Firmware Source Code
        working-directory: ./
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: Add Feeds
        working-directory: ./openwrt
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          echo 'src-git istore https://github.com/linkease/istore;main' >> feeds.conf.default
          # echo 'src-git passwall https://github.com/xiaorouji/openwrt-passwall;main' >> feeds.conf.default
          # echo 'src-git lucky https://github.com/sirpdboy/luci-app-lucky;main' >> feeds.conf.default

      - name: Update Feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Get Latest Tailscale Version
        working-directory: ./openwrt
        run: |
          tailscale_latest_version=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | grep 'tag_name' | cut -d '"' -f 4 | sed 's/^v//')
          echo "Latest Tailscale version: ${tailscale_latest_version}"
          [ ! -d "./dl" ] && mkdir -p ./dl
          wget https://codeload.github.com/tailscale/tailscale/tar.gz/v${tailscale_latest_version} -O dl/tailscale-${tailscale_latest_version}.tar.gz
          tailscale_hash=$(sha256sum dl/tailscale-${tailscale_latest_version}.tar.gz | awk '{ print $1 }')

          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${tailscale_latest_version}/" feeds/packages/net/tailscale/Makefile
          sed -i "s/^PKG_HASH:=.*/PKG_HASH:=${tailscale_hash}/" feeds/packages/net/tailscale/Makefile

      # - name: Add Tailscale Luci
      #   working-directory: ./openwrt
      #   run: |
      #     sed -i '/\/etc\/init\.d\/tailscale/d;/\/etc\/config\/tailscale/d;' feeds/packages/net/tailscale/Makefile
      #     git clone https://github.com/asvow/luci-app-tailscale package/luci-app-tailscale

      - name: Get Latest ZeroTierOne Version
        working-directory: ./openwrt
        run: |
          zerotier_latest_version=$(curl -s https://api.github.com/repos/zerotier/zerotierone/releases/latest | grep 'tag_name' | cut -d '"' -f 4 | sed 's/^v//')
          echo "Latest ZeroTierOne version: ${zerotier_latest_version}"
          [ ! -d "./dl" ] && mkdir -p ./dl
          wget https://codeload.github.com/zerotier/zerotierone/tar.gz/${zerotier_latest_version} -O dl/ZeroTierOne-${zerotier_latest_version}.tar.gz
          zerotier_hash=$(sha256sum dl/ZeroTierOne-${zerotier_latest_version}.tar.gz | awk '{ print $1 }')

          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${zerotier_latest_version}/" feeds/packages/net/zerotier/Makefile
          sed -i "s/^PKG_HASH:=.*/PKG_HASH:=${zerotier_hash}/" feeds/packages/net/zerotier/Makefile

      - name: Import Custom Configuration
        working-directory: ./
        run: cp -f myconfig/${{ github.event.inputs.config_file }} ./openwrt/.config

      - name: Generate Configuration
        working-directory: ./openwrt
        run: make defconfig

      - name: Launch SSH Management
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh == 'true'
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Upload .config
        uses: actions/upload-artifact@v4
        with:
          name: .config
          path: ./openwrt/.config
          include-hidden-files: true

      - name: Download Packages
        working-directory: ./openwrt
        run: |
          make download -j16

      - name: Compile Firmware
        working-directory: ./openwrt
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        working-directory: ./openwrt
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload Buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./openwrt/artifact/buildinfo/

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./openwrt/artifact/package/

      - name: Upload Firmware ALL
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/

      - name: Upload Firmware x64 EFI-img
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-combined-efi.img.gz
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz

      - name: Upload Firmware x64 EFI-qcow2
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-combined-efi.qcow2
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.qcow2

      - name: Upload Firmware x64 EFI-vdi
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-combined-efi.vdi
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.vdi

      - name: Upload Firmware x64 EFI-vhdx
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-combined-efi.vhdx
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.vhdx

      - name: Upload Firmware x64 EFI-vmdk
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-combined-efi.vmdk
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.vmdk

      - name: Upload Firmware x64
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-x86-64-generic-squashfs-rootfs.img.gz
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-rootfs.img.gz
